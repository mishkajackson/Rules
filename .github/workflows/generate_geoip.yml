name: Generate GeoIP

on:
  schedule:
    - cron: '0 0 * * *' # Запуск каждый день в полночь
  workflow_dispatch: # Возможность запустить вручную

jobs:
  generate-geoip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout репозитория
        uses: actions/checkout@v4

      - name: Установка Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Клонирование geoip
        run: |
          git clone https://github.com/v2fly/geoip.git
          cd geoip
          go mod download

      - name: Подготовка текстовых файлов из Clash/IPs
        run: |
          mkdir -p geoip/input
          # Проверяем наличие папки Clash/IPs
          if [ ! -d "Clash/IPs" ]; then
            echo "Ошибка: папка Clash/IPs не найдена" >&2
            exit 1
          fi
          # Обрабатываем все .yaml файлы в Clash/IPs
          for yaml_file in Clash/IPs/*.yaml; do
            if [ -f "$yaml_file" ]; then
              base_name=$(basename "$yaml_file" .yaml)
              awk '/payload:/{next} {print $2}' "$yaml_file" > "geoip/input/${base_name}.txt"
              echo "Обработан файл: $yaml_file -> geoip/input/${base_name}.txt"
              # Проверка, что файл не пустой
              if [ ! -s "geoip/input/${base_name}.txt" ]; then
                echo "Предупреждение: файл geoip/input/${base_name}.txt пустой" >&2
              fi
            fi
          done
          # Проверка содержимого для отладки
          ls -la geoip/input/
          echo "Содержимое файлов в geoip/input/:"
          find geoip/input/ -type f -exec echo "Файл: {}" \; -exec cat {} \;

      - name: Создание конфигурационного файла config.json
        run: |
          cd geoip
          cat <<EOF > config.json
          {
            "input": [
              {
                "type": "text",
                "action": "add",
                "args": {
                  "inputDir": "input"
                }
              }
            ],
            "output": [
              {
                "type": "v2rayGeoIPDat",
                "args": {
                  "file": "output/geoip.dat"
                }
              }
            ]
          }
          EOF
          # Проверка конфига и доступности файлов
          cat config.json
          ls -la input/

      - name: Генерация geoip.dat
        run: |
          cd geoip
          go run ./ -c config.json
          mkdir -p ../Geodata
          # Перемещаем файл из output/dat/
          if [ -f "output/dat/geoip.dat" ]; then
            mv output/dat/geoip.dat ../Geodata/geoip.dat
            echo "geoip.dat успешно сгенерирован и перемещен"
            # Проверка размера файла
            ls -lh ../Geodata/geoip.dat
          else
            echo "Ошибка: geoip.dat не был сгенерирован в ожидаемом месте" >&2
            ls -la output/
            ls -la output/dat/
            exit 1
          fi
          # Проверка, что файл создан и не пустой
          ls -la ../Geodata/
          if [ ! -f "../Geodata/geoip.dat" ]; then
            echo "Ошибка: geoip.dat не был перемещен" >&2
            exit 1
          elif [ ! -s "../Geodata/geoip.dat" ]; then
            echo "Предупреждение: geoip.dat пустой" >&2
          fi

      - name: Проверка изменений
        id: check_changes
        run: |
          git add Geodata/geoip.dat
          git diff --cached --quiet || echo "changed=true" >> $GITHUB_ENV
          echo "Изменения обнаружены: ${{ env.changed }}"

      - name: Commit и Push изменений
        if: env.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "Обновление geoip.dat $(date +'%Y-%m-%d')"
          git push https://github-actions:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main